#!/usr/bin/env python3
"""
Running training.

Source: https://www.analyticsvidhya.com/blog/2022/02/sentiment-analysis-using-transformers/
"""

import numpy as np
import pandas as pd
from transformers import DistilBertTokenizerFast
import torch
from transformers import DistilBertForSequenceClassification
from transformers import Trainer, TrainingArguments

train = pd.read_csv("./data/testing.csv")
test = pd.read_csv("./data/testing.csv")

train.drop("id", axis=1, inplace=True)
test.drop("id", axis = 1, inplace=True)

tokenizer = DistilBertTokenizerFast.from_pretrained("distilbert-base-uncased")
inputs = tokenizer(train['contents'].tolist(), padding="max_length", truncation=True)

class pdfDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels
    
    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['label'] = torch.tensor(self.labels[idx])
        return item
    
    def __len__(self):
        return len(self.labels)

train_dataset = pdfDataset(inputs, train['label'].tolist())

model = DistilBertForSequenceClassification.from_pretrained("distilbert-base-uncased")

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

model.to(device)

training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=3,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=64,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir="./logs",
    logging_steps=10,
)
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
)

trainer.train()

torch.save(model.state_dict(), 'model_weights.pth')

def to_check_results(test_encoding):
    input_ids = torch.tensor(test_encoding["input_ids"]).to(device)
    attention_mask = torch.tensor(test_encoding["attention_mask"]).to(device)
    with torch.no_grad():
        outputs = model(input_ids.unsqueeze(0), attention_mask.unsqueeze(0))
    y = np.argmax(outputs[0].to('cpu').numpy())

    return y

l2 = []
for i in test['contents']:
    test_encoding1 = tokenizer(i, truncation=True, padding=True)
    input_ids = torch.tensor(test_encoding1['input_ids']).to(device)
    attention_mask = torch.tensor(test_encoding1['attention_mask']).to(device)
    op = to_check_results(test_encoding1)
    l2.append(op)

print(l2)
